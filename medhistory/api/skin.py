import cv2
import numpy as np
import base64


def check_cancer(img_str):
	#data = base64.decodeString(img_str)
	data = base64.b64decode(img_str)
	#data = img_str
	if ".png" in data:
		extension = ".png"
	else:
		extension = ".jpg"
	with open("test" + extension, "wb") as f:
		f.write(data)


	img = cv2.imread("test" + extension)
	img_copy = img
	R = np.mean(img[:, :, 0]) / 1000
	G = np.mean(img[:, :, 1]) / 1000
	B = np.mean(img[:, :, 2]) / 1000


	const = [
		[0.412453, 0.357580, 0.180423],
		[0.212671, 0.715160, 0.072169],
		[0.019334, 0.119193, 0.950227]
	]


	X, Y, Z = np.dot(const, [[R], [G], [B]])

	L = 116 * Y ** (1.0 / 3.0) - 16
	if Y <= 0.008856:
		L = 903.3 * Y

	H = 60 * (B - G) / (max(R, G, B) - min(R, G, B))

	img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
	ret, mask = cv2.threshold(
		img, min(H, L), max(H, L), cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU
	)
	cv2.bitwise_and(img, img, mask=mask)

	contours, heirarchy = cv2.findContours(
		mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE
	)

	contour = max(contours, key=cv2.contourArea)
	area = cv2.contourArea(contour) / (150.0 * 150.0)
	# Diameter
	D = ((area / 3.14) ** 0.5) * 2
	if D > 6:
		D = 5

	ellipse = cv2.fitEllipse(contour)
	a = ellipse[1][0]
	b = ellipse[1][1]
	# Asymmetrix Index
	A = (3.14 * a * b - (3.14 * a * a / 4) - (3.14 * b * b / 4))
	A = A / (2 * cv2.contourArea(contour))

	# Border Irregularity
	B = cv2.arcLength(contour, 1) / 300

	rr, gg, bb = np.uint8(
		np.average(
			np.average(cv2.cvtColor(img_copy, cv2.COLOR_BGR2HSV), axis=0), axis=0
		)
	)
	# Color Index
	C = (rr + gg + bb) / 9.0

	TDS = 1.3 * A + 0.1 * B + 0.5 * C + 0.5 * D
	if TDS < 4.75:
		return "benign"
	elif TDS > 5.45:
		return "malignant melanoma"
	else:
		return "suspicious lesion"

imgBase64="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"

malm2 = "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"

print(check_cancer(malm2))
